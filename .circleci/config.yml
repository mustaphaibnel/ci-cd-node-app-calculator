version: 2.1

orbs:
  node: circleci/node@4.7.0
  docker: circleci/docker@2.1.1

jobs:
  build-and-test:
    docker:
      - image: cimg/node:14.17
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run: npm install
      - save_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run: npm run build
      - run: npm test
      - run: npm run coverage
      - run:
          name: Install SonarQube Scanner
          command: |
            sudo apt-get update
            sudo apt-get install -y unzip
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
            unzip sonar-scanner-cli-4.6.2.2472-linux.zip
            sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
            echo 'export PATH="$PATH:/opt/sonar-scanner/bin"' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: SonarQube Analysis
          command: |
            sonar-scanner \
              -Dsonar.projectKey=${CIRCLE_PROJECT_USERNAME}${CIRCLE_PROJECT_REPONAME} \
              -Dsonar.host.url=$SONARQUBE_HOST \
              -Dsonar.login=$SONAR_TOKEN
      # Store reports in Amazon S3
      - run:
          name: Store Reports in S3
          command: |
            sudo apt-get install awscli
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_REGION
            aws s3 cp ./coverage s3://${CIRCLE_PROJECT_USERNAME}-cloud/${CIRCLE_PROJECT_REPONAME}/ --recursive
      # Store artifacts in GitHub
      - store_artifacts:
          path: ./coverage
          destination: ${CIRCLE_PROJECT_REPONAME}

  build-and-push-docker:
    docker:
      - image: cimg/node:14.17
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG} .
      - run:
          name: Login to Docker Hub
          command: echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
      - run:
          name: Push Docker image
          command: docker push ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-and-test
      - build-and-push-docker:
          requires:
            - build-and-test
